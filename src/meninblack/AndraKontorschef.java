/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package meninblack;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author Sajjad
 */
public class AndraKontorschef extends javax.swing.JFrame {

    private static InfDB idb;
    String kontor = "";
    String agentID = "";

    /**
     * Creates new form AndraKontorschef
     */
    public AndraKontorschef(InfDB idb) {

        initComponents();
        this.idb = idb;
        gorFetchColumn("Benamning", "Plats", cbKontor);
        gorFetchColumn("Namn", "Agent", cbKontorschef);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbKontor = new javax.swing.JComboBox<>();
        cbKontorschef = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        cbKontor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Välj kontor" }));
        cbKontor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbKontorActionPerformed(evt);
            }
        });

        cbKontorschef.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Välj kontorschef" }));
        cbKontorschef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbKontorschefActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbKontor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbKontorschef, 0, 246, Short.MAX_VALUE))
                .addContainerGap(77, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(cbKontor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(cbKontorschef, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cbKontorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbKontorActionPerformed
        kontor = cbKontor.getSelectedItem().toString();
    }//GEN-LAST:event_cbKontorActionPerformed

    private void cbKontorschefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbKontorschefActionPerformed
        String agent = cbKontorschef.getSelectedItem().toString();

        try {
            ArrayList<HashMap<String, String>> kontorschefLista;
            ArrayList<HashMap<String, String>> platsLista;

            agentID = idb.fetchSingle("Select Agent_ID from agent where namn ='" + agent + "'");
            kontorschefLista = idb.fetchRows("select * from kontorschef where Agent_ID =" + agentID);
            platsLista = idb.fetchRows("select * from kontorschef where kontorsbeteckning ='" + kontor + "kontoret'");

            if (!kontorschefLista.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Agenten är kontorschef i ett annat kontor!");
            } else if (!platsLista.isEmpty()) {
                idb.update("UPDATE kontorschef SET Agent_ID=" + agentID + " where kontorsbeteckning ='" + kontor + "kontoret'");
                JOptionPane.showMessageDialog(null, "kontorschef har ändrats");
                dispose();
            } else {
                idb.insert("Insert into kontorschef values(" + agentID + ", '" + kontor + "kontoret')");
                JOptionPane.showMessageDialog(null, "kontorschef har ändrats");
                dispose();
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Databasfel! +++");
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_cbKontorschefActionPerformed

    private void gorFetchColumn(String kolumn, String tabel, JComboBox comboBox) {
        ArrayList<String> allaAlternativ;
        String fraga = "Select " + kolumn + " from " + tabel;

        try {
            allaAlternativ = idb.fetchColumn(fraga);
            for (String alternativ : allaAlternativ) {
                comboBox.addItem(alternativ);
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Databasfel! ***");
            System.out.println(e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("////" + e.getMessage());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbKontor;
    private javax.swing.JComboBox<String> cbKontorschef;
    // End of variables declaration//GEN-END:variables
}
